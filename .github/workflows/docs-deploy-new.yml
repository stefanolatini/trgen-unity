name: 📚 Deploy VuePress Documentation to GitHub Pages

on:
  push:
    branches: [ main ]
    paths:
      - 'Runtime/**'
      - 'generate_legacy_docs.py'
      - 'package-docs.json'
      - '.github/workflows/docs-deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'Runtime/**'
      - 'generate_legacy_docs.py'
      - 'package-docs.json'
  workflow_dispatch:

# Imposta permissions per GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Consenti un solo deployment concorrente
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Job per costruire la documentazione
  build:
    name: 🔨 Build VuePress Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        
    - name: 💾 Cache Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('package-docs.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
        
    - name: 🔧 Configure Pages
      uses: actions/configure-pages@v4
      
    - name: 🏗️ Generate Documentation Site
      run: |
        echo "📚 Generating documentation structure..."
        
        # 1. Genera la documentazione usando lo script Python
        echo "🐍 Running Python documentation generator..."
        python3 generate_legacy_docs.py --source Runtime --output docs-site
        
        # 2. Verifica che i file base siano stati generati
        echo "🔍 Checking generated files..."
        ls -la docs-site/
        
        # 3. Verifica che esista il README.md principale
        if [ ! -f "docs-site/README.md" ]; then
          echo "❌ README.md not found in docs-site, VuePress needs it for index.html"
          exit 1
        fi
        
        # 4. Copia il banner esistente come hero image per VuePress
        echo "🖼️ Setting up hero image..."
        mkdir -p docs-site/.vuepress/public
        cp images/banner.png docs-site/.vuepress/public/hero.png
        
        # 5. Setup package.json per VuePress
        echo "📦 Setting up VuePress dependencies..."
        cp package-docs.json package.json
        npm install --production=false
        
        # 6. Build del sito VuePress
        echo "🏗️ Building VuePress documentation..."
        npm run build
        
        echo "📋 Build output:"
        ls -la public/
        
        # Verifica che i file siano stati generati
        if [ ! -f "public/index.html" ]; then
          echo "❌ Error: index.html not found in public/"
          echo "📋 Contents of public directory:"
          find public -name "*.html" || echo "No HTML files found"
          exit 1
        fi
        
        echo "✅ VuePress build completed successfully"
        
    - name: 📤 Upload Pages Artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: public/

  # Job per il deploy su GitHub Pages
  deploy:
    name: 🚀 Deploy to GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 🚀 Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: 📢 Deployment Summary
      run: |
        echo "## 🎉 Documentation Deployed Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "📖 **Site URL:** ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
        echo "⏰ **Deployed at:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "🔗 **View Documentation:** [TrGEN Unity Docs](${{ steps.deployment.outputs.page_url }})" >> $GITHUB_STEP_SUMMARY

  # Job opzionale per validazione link
  validate:
    name: 🔍 Validate Documentation
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: 🔍 Download Build Artifact
      uses: actions/download-artifact@v4
      with:
        name: github-pages
        path: public/
        
    - name: 🧪 Validate HTML
      run: |
        echo "🔍 Validating generated HTML..."
        
        # Controlla che i file principali esistano
        required_files=("index.html" "api/index.html" "guide/index.html" "examples/index.html")
        
        for file in "${required_files[@]}"; do
          if [ -f "public/$file" ]; then
            echo "✅ Found: $file"
          else
            echo "❌ Missing: $file"
            exit 1
          fi
        done
        
        echo "✅ All required files found"
        
    - name: 📊 Report Validation
      run: |
        echo "## 🔍 Documentation Validation Report" >> $GITHUB_STEP_SUMMARY
        echo "✅ **HTML Structure:** Valid" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Required Pages:** All present" >> $GITHUB_STEP_SUMMARY
        echo "📊 **Total Files:** $(find public -name "*.html" | wc -l)" >> $GITHUB_STEP_SUMMARY