name: 📚 Deploy Documentation with DocFX

on:
  push:
    branches: [ main ]
    paths:
      - 'README.md'
      - 'Runtime/**/*.cs'
      - 'CHANGELOG.md'
      - 'docs/**'
      - '.github/workflows/docs.yml'

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build documentation using DocFX
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 📁 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: 📦 Setup Pages
        uses: actions/configure-pages@v4

      - name: 📥 Install DocFX
        run: |
          dotnet tool install -g docfx
          echo "$(dotnet tool path -g)" >> $GITHUB_PATH

      - name: 🏗️ Create DocFX Configuration
        run: |
          # Create docfx.json configuration
          cat > docfx.json << 'EOF'
          {
            "metadata": [
              {
                "src": [
                  {
                    "files": ["Runtime/**/*.cs"],
                    "exclude": ["**/bin/**", "**/obj/**"]
                  }
                ],
                "dest": "api",
                "properties": {
                  "TargetFramework": "netstandard2.1"
                },
                "disableGitFeatures": false,
                "disableDefaultFilter": false
              }
            ],
            "build": {
              "content": [
                {
                  "files": ["api/**.yml", "api/index.md"]
                },
                {
                  "files": ["README.md", "CHANGELOG.md"],
                  "dest": "."
                },
                {
                  "files": ["docs/**/*.md"],
                  "dest": ".",
                  "exclude": ["docs/README.md"]
                }
              ],
              "resource": [
                {
                  "files": ["images/**"]
                }
              ],
              "overwrite": [
                {
                  "files": ["apidoc/**.md"],
                  "exclude": ["obj/**", "_site/**"]
                }
              ],
              "dest": "_site",
              "globalMetadataFiles": [],
              "fileMetadataFiles": [],
              "template": ["default"],
              "postProcessors": [],
              "markdownEngineName": "markdig",
              "noLangKeyword": false,
              "keepFileLink": false,
              "cleanupCacheHistory": false,
              "disableGitFeatures": false,
              "globalMetadata": {
                "_appTitle": "TrGEN Unity Library",
                "_appFooter": "TrGEN Unity Library - CoSANLab, Sapienza University of Rome",
                "_enableSearch": true,
                "_gitContribute": {
                  "repo": "https://github.com/stefanolatini/trgen-unity",
                  "branch": "main"
                }
              }
            }
          }
          EOF

      - name: 📝 Create API Overview
        run: |
          mkdir -p api
          cat > api/index.md << 'EOF'
          # TrGEN Unity API Reference
          
          Welcome to the complete API reference for TrGEN Unity Library.
          
          This documentation is automatically generated from XML documentation comments in the C# source code using DocFX.
          
          ## Core Classes
          
          - **TrgenClient** - Main client for TriggerBox communication
          - **TrgenPort** - Programmable trigger with internal memory  
          - **TrgenConfiguration** - Configuration data structures
          - **TrgenConfigurationManager** - Configuration import/export
          - **InstructionEncoder** - Trigger instruction encoding
          
          ## Key Features
          
          - 🔌 **Ethernet Communication** - Direct TCP/IP connection
          - ⚡ **Multiple Trigger Types** - NeuroScan, Synamps, TMS, GPIO
          - 🎯 **Precision Timing** - Microsecond-level control  
          - 💾 **Configuration Management** - Save/restore complete setups
          - 🔧 **Automatic Programming** - Hardware trigger programming
          
          Browse the API reference using the navigation menu.
          EOF

      - name: 🔨 Build Documentation with DocFX
        run: |
          # Generate metadata from C# source
          docfx metadata docfx.json
          
          # Build the documentation site
          docfx build docfx.json
          
          echo "✅ DocFX documentation build completed"

      - name: 📤 Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site

  # Deployment job
  deploy:
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: 🎉 Success
        run: |
          echo "✅ Documentation deployed successfully!"
          echo "🌐 Site URL: ${{ steps.deployment.outputs.page_url }}"