name: 📚 Deploy Documentation (XMLDoc2MD)

on:
  push:
    branches: [ main ]
    paths:
      - 'README.md'
      - 'Runtime/**/*.cs'
      - 'CHANGELOG.md'
      - 'docs/**'
      - '.github/workflows/docs.yml'

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build documentation using xmldoc2md
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 📁 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: 📦 Setup Pages
        uses: actions/configure-pages@v4

      - name: 📥 Install xmldoc2md
        run: |
          dotnet tool install -g xmldoc2md
          echo "$(dotnet tool path -g)" >> $GITHUB_PATH

      - name: 🏗️ Create Project for Documentation
        run: |
          # Create a temporary project that compiles without Unity dependencies
          mkdir -p temp_docs
          
          # Copy C# files and strip Unity dependencies for documentation
          find Runtime -name "*.cs" -exec cp {} temp_docs/ \;
          
          # Replace UnityEngine.Debug with System.Console for documentation
          sed -i 's/UnityEngine\.Debug\.Log/System.Console.WriteLine/g' temp_docs/*.cs
          sed -i 's/using UnityEngine;//g' temp_docs/*.cs
          sed -i 's/\[Serializable\]//g' temp_docs/*.cs
          
          # Create a simple .NET project for documentation
          cat > temp_docs/TrgenDocs.csproj << 'EOF'
          <Project Sdk="Microsoft.NET.Sdk">
            <PropertyGroup>
              <TargetFramework>netstandard2.1</TargetFramework>
              <LangVersion>9.0</LangVersion>
              <GenerateDocumentationFile>true</GenerateDocumentationFile>
              <DocumentationFile>TrgenDocs.xml</DocumentationFile>
              <NoWarn>CS0067;CS0108;CS0114;CS0162;CS0164;CS0168;CS0169;CS0183;CS0219;CS0414;CS0618;CS0626;CS0649;CS0693;CS1030;CS1591;CS1998</NoWarn>
            </PropertyGroup>
          </Project>
          EOF

      - name: 🔨 Build Documentation XML
        run: |
          cd temp_docs
          dotnet build TrgenDocs.csproj --configuration Release
          ls -la *.xml || echo "No XML file generated"

      - name: 📝 Generate Markdown Documentation
        run: |
          mkdir -p _site/api
          
          if [ -f "temp_docs/TrgenDocs.xml" ]; then
            echo "📝 Converting XML documentation to Markdown..."
            xmldoc2md temp_docs/TrgenDocs.xml _site/api --index-page-name "README"
          else
            echo "⚠️ No XML documentation found, creating basic API documentation..."
            
            # Fallback: create basic documentation from source comments
            mkdir -p _site/api
            echo "# TrGEN Unity API Reference" > _site/api/README.md
            echo "" >> _site/api/README.md
            echo "Documentation extracted from C# source files." >> _site/api/README.md
            echo "" >> _site/api/README.md
            
            # Extract class names and summaries
            for file in Runtime/*.cs; do
              if [ -f "$file" ]; then
                echo "## $(basename "$file" .cs)" >> _site/api/README.md
                echo "" >> _site/api/README.md
                
                # Extract summary comments
                grep -A 3 "/// <summary>" "$file" | sed 's/.*\/\/\/ //' | sed 's/<[^>]*>//g' >> _site/api/README.md || true
                echo "" >> _site/api/README.md
              fi
            done
          fi

      - name: 🏗️ Create Documentation Site
        run: |
          # Copy main documentation files
          cp README.md _site/index.md
          cp CHANGELOG.md _site/changelog.md
          
          # Copy images if they exist
          if [ -d "images" ]; then
            cp -r images _site/
          fi
          
          echo "✅ Documentation site created"

      - name: 📤 Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site

  # Deployment job
  deploy:
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: 🎉 Success
        run: |
          echo "✅ Documentation deployed successfully!"
          echo "🌐 Site URL: ${{ steps.deployment.outputs.page_url }}"